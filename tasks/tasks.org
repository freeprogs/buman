#+STARTUP: content logdone hideblocks
#+TODO: TASK(t!) | DONE(d) CANCEL(c)
#+TODO: BUG(b!) | FIXED(f) REJECT(r)
#+PRIORITIES: A F C
#+TAGS: current(c) testing(t)
#+CONSTANTS: last_issue_id=5

* Задачи
  :PROPERTIES:
  :COLUMNS:  %3issue_id(ID) %4issue_type(TYPE) %TODO %40ITEM %SCHEDULED %DEADLINE %1PRIORITY
  :ARCHIVE:  tasks_archive.org::* Архив задач
  :END:

** TASK Придумать формат файла настроек
   :PROPERTIES:
   :issue_id: 1
   :issue_type: task
   :END:
   [2018-07-06 Пт]

   Файл состоит из записей. Запись определяется фигурными
   скобками. Внутри записи (внутри фигурных скобок) на разных строках
   стоят (источник, приёмник, опции). Источник - директория или файл;
   приёмник - директория или файл; опции - список опций через
   двоеточие. Опции могут параметризоваться через равно.

   Пример бэкапа одного файла и одной директории:
   Файл сжимается и шифруется, для результата создаётся хеш и кладётся
   рядом в текстовом файле.
   Директория просто копируется, создаются хеши всех файлов в ней и их
   список кладётся рядом в текстовом файле.
   #+BEGIN_EXAMPLE
     {
         /path/to/source/file
         /path/to/destination/directory
         arch=bzip2:hash=md5:cypher=aes
     }
     {
         /path/to/source/directory
         /path/to/destination/directory
         hash=md5
     }
   #+END_EXAMPLE

   [2018-07-07 Сб]

   Нужно рассмотреть противоречия в конфигурации, когда записи
   противоречат друг другу и когда внутри записи поля противоречат
   друг другу.

   Ещё можно сделать так, чтобы источников и приёмников было несколько
   в одной записи:
   Два разных файла кладутся в каждую из директорий.
   #+BEGIN_EXAMPLE
     {
         src=/path/to/source/file1
         src=/path/to/source/file2
         dst=/path/to/destination/directory1
         dst=/path/to/destination/directory2
         opt=arch:hash
     }
   #+END_EXAMPLE

   Ещё можно ввести синтаксис для раздельной записи опций:
   Параметры одной опции можно последовательно аккумулировать.
   #+BEGIN_EXAMPLE
     {
         src=/path/to/source/file
         dst=/path/to/destination/directory
         opt=arch=bzip2:hash=md5
         opt=cypher=aes
         opt=cypher=256bits
     }
   #+END_EXAMPLE

   [2018-07-08 Вс]

   Добавить имя для записи, чтобы при выводе в консоль и логи можно
   было выводить только имя записи, сократив количество информации.

   Добавить пункт для логгирования. У логгирования есть несколько
   состояний, одно из них требует смены имени файла, поэтому должна
   быть отдельная опция, куда записывается путь к лог-файлу.

** TASK Придумать систему логирования в программе
   :PROPERTIES:
   :issue_id: 2
   :issue_type: task
   :END:
   [2018-07-08 Вс]

   Должно быть логирование по умолчанию, которое будет регистрировать
   только ошибки (как у wget).

   Лог создаётся и туда пишется информация из всех сессий с
   добавлением в конец.

   Если лог только создался, сверху должен вставиться заголовок, чтобы
   было понятно, от какой программы лог.

   Строка лога должна содержать дату-время до миллисекунд, имя записи,
   тип ошибки, понятное сообщение для пользователя и дополнительные
   данные ошибки для решения проблемы с использованием только этой
   строки лога.

   Должна быть настройка в записи для смены файла лога.

   Должна быть опция отмены логирования для записи, даже если были
   ошибки в процессе работы программы.

** TASK Придумать формат вывода информации на экран
   :PROPERTIES:
   :issue_id: 3
   :issue_type: task
   :END:
   [2018-07-08 Вс]

   Сверху должен писаться заголовок.

   В заголовке должно быть указано, сколько всего объектов будет
   обрабатываться, состояние дефолтных настроек программы (идёт ли
   логирование и куда идёт).

   После заголовка идёт тело процесса выполнения, которое состоит из
   текущих выполняющихся задач.

   Каждая выполняемая задача должна содержать пару (номер объекта,
   всего объектов), имя записи, обрабатываемый источник,
   обрабатываемый приёмник. После выполнения задачи должно писаться
   сообщение о статусе ok или fail.

   Возможно, нужно писать время начала и время конца выполнения
   задачи, чтобы можно было прикинуть время для тяжелых файлов.

   Имя записи и статус завершения задачи нужно писать так, чтобы их
   удобно было искать через grep.

   Внизу идёт подвал со статистикой по всем задачам.

   В статистике должно быть указано, сколько всего объектов
   обработано, сколько скопировано, сколько пропущено, сколько ошибок.

** TASK Придумать поведение для найденных файлов в приёмнике
   :PROPERTIES:
   :issue_id: 4
   :issue_type: task
   :END:
   [2018-07-08 Вс]

   При копировании файла из источника в приёмнике часто будет
   оказываться такой же файл.

   Если файлы одинаковые по хеш-сумме, нужно файл пропускать.

   Если файлы разные, то по умолчанию файл должен перезаписываться
   файлом из источника.

   Должна быть опция, которая устанавливает поведение. Виды поведений:
   переписать безусловно (по умолчанию), пропустить безусловно,
   ротировать.

   Ротация файлов означает, что файл в приёмнике должен
   переименоваться, как в logrotate в linux происходит, и файл из
   источника должен записаться, как будто файла в приёмнике не
   было. При наличие хеша у старого файла, хеш должен так же
   переименоваться, как и сам файл.


* Баги
  :PROPERTIES:
  :COLUMNS:  %3issue_id(ID) %4issue_type(TYPE) %TODO %40ITEM %SCHEDULED %DEADLINE %1PRIORITY
  :ARCHIVE:  tasks_archive.org::* Архив багов
  :END:


* Окружение
  :PROPERTIES:
  :COLUMNS:  %3issue_id(ID) %4issue_type(TYPE) %TODO %40ITEM %SCHEDULED %DEADLINE %1PRIORITY
  :ARCHIVE:  tasks_archive.org::* Архив окружения
  :END:

** TASK Создать man-страницу с описанием настроек
   :PROPERTIES:
   :issue_id: 5
   :issue_type: task
   :END:
   [2018-07-14 Сб]

   Нужно описать все возможные поля конфигурационного файла. Нужно
   описать весь его досутпный синтаксис, исключить недокументированные
   возможности.

   Список:
   - Записей может быть несколько
   - В записи может быть несколько источников
   - В записи может быть несколько приёмников
   - В записи может быть одно поле с несколькими опциями
   - В записи может быть несколько полей с опциями
   - Опция может иметь свои настройки
   - Одинаковые опции могут аккумулироваться

   Варианты опций и внутренние настройки каждой опции должны быть все
   описаны.

   Нужно привести несколько разных примеров конфигурационного файла,
   чтобы было понятно, как его лучше писать.
